name: ci and push to ecr

on:
  push:
    branches:
      - main

env:
   GO_BIN_PATH: echo "$(go env GOPATH)/bin"
   AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
   AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
   AWS_ECR_IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Set up Go 1.20
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
          cache-dependency-path: src/go.mod

      - uses: actions/cache@v3
        id: cache-go-bin
        with:
          path: |
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles(env.GO_BIN_PATH) }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go install
        if: ${{ steps.cache-go-bin.outputs.cache-hit != 'true' }}
        working-directory: src
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2

      - name: Go Lint
        working-directory: src
        run: |
          golangci-lint run ./...

      - name: Build
        working-directory: src
        run: |
          mkdir -p ../build
          go build -v -o ../build/main main.go

      - name: Go Test
        working-directory: src
        run: |
          go test -v ./...

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Echo env
        run: |
          echo ${{ github.workspace }}
          echo ${{ github.sha}}

      - name: Push to ECR
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
          AWS_ECR_IMAGE_TAG: ${{ env.AWS_ECR_IMAGE_TAG }}
        run: |
          docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_ECR_IMAGE_TAG -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:latest -f docker/Dockerfile src
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_ECR_IMAGE_TAG
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:latest
